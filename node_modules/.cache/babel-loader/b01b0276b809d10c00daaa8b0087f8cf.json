{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport analizeApi from \"../api/analize\";\nimport gifApi from \"../api/gif\";\nconst initialState = {\n  user_id: \"\",\n  text: \"\",\n  time: \"\",\n  loading: false,\n  error: false\n};\nconst slice = createSlice({\n  name: \"hourReport\",\n  initialState,\n  reducers: {\n    fetchStart: state => {\n      return Object.assign({}, state, {\n        text: \"\",\n        loading: true\n      });\n    },\n    fetchSucceed: (state, action) => {\n      return Object.assign({}, state, {\n        user_infos: action.payload,\n        loading: false\n      });\n    },\n    fetchFaild: (state, action) => {\n      console.error(action.payload);\n      return Object.assign({}, state, {\n        loading: false,\n        error: true\n      });\n    },\n    clear: () => {\n      return {\n        text: \"\",\n        loading: false,\n        error: false\n      };\n    },\n    postReport: (state, action) => {\n      console.log(\"post\");\n      console.log(action.payload);\n      return {\n        text: action.payload,\n        loading: false,\n        error: false\n      };\n    }\n  }\n}); // Reducer\n\nexport default slice.reducer; // Actions\n\nexport const {\n  clear\n} = slice.actions;\nexport const {\n  postReport\n} = slice.actions; // Async task\n\nexport function fetchAsync(channel) {\n  return async function (dispatch) {\n    dispatch(slice.actions.fetchStart());\n\n    try {\n      const response = await analizeApi.slack(channel);\n      console.log(response);\n      dispatch(slice.actions.fetchSucceed(response));\n    } catch (err) {\n      dispatch(slice.actions.fetchFaild(err));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/shiokawahayato/work/HRLog/src/stores/hourReport.js"],"names":["createSlice","analizeApi","gifApi","initialState","user_id","text","time","loading","error","slice","name","reducers","fetchStart","state","Object","assign","fetchSucceed","action","user_infos","payload","fetchFaild","console","clear","postReport","log","reducer","actions","fetchAsync","channel","dispatch","response","slack","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG,EADO;AAEjBC,EAAAA,IAAI,EAAG,EAFU;AAGjBC,EAAAA,IAAI,EAAG,EAHU;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;AAQA,MAAMC,KAAK,GAAGT,WAAW,CAAC;AACzBU,EAAAA,IAAI,EAAE,YADmB;AAEzBP,EAAAA,YAFyB;AAGzBQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAEC,KAAK,IAAI;AACxB,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAER,QAAAA,IAAI,EAAE,EAAR;AAAYE,QAAAA,OAAO,EAAE;AAArB,OAAzB,CAAP;AACI,KAHK;AAINS,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpC,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAEK,QAAAA,UAAU,EAAED,MAAM,CAACE,OAArB;AAA8BZ,QAAAA,OAAO,EAAE;AAAvC,OAAzB,CAAP;AACI,KANK;AAONa,IAAAA,UAAU,EAAE,CAACP,KAAD,EAAQI,MAAR,KAAmB;AAClCI,MAAAA,OAAO,CAACb,KAAR,CAAcS,MAAM,CAACE,OAArB;AACA,aAAOL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAEN,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAAzB,CAAP;AACO,KAVE;AAYNc,IAAAA,KAAK,EAAE,MAAM;AAChB,aAAO;AAAEjB,QAAAA,IAAI,EAAE,EAAR;AAAYE,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,KAAK,EAAE;AAAnC,OAAP;AACO,KAdE;AAeHe,IAAAA,UAAU,EAAE,CAACV,KAAD,EAAOI,MAAP,KAAkB;AAC1BI,MAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ;AACAH,MAAAA,OAAO,CAACG,GAAR,CAAYP,MAAM,CAACE,OAAnB;AACA,aAAO;AAACd,QAAAA,IAAI,EAAEY,MAAM,CAACE,OAAd;AAAuBZ,QAAAA,OAAO,EAAE,KAAhC;AAAuCC,QAAAA,KAAK,EAAE;AAA9C,OAAP;AACH;AAnBE;AAHe,CAAD,CAAzB,C,CA2BA;;AACA,eAAeC,KAAK,CAACgB,OAArB,C,CAEA;;AACA,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAYb,KAAK,CAACiB,OAAxB;AACP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAiBd,KAAK,CAACiB,OAA7B,C,CAEP;;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAChC,SAAO,gBAAeC,QAAf,EAAyB;AACnCA,IAAAA,QAAQ,CAACpB,KAAK,CAACiB,OAAN,CAAcd,UAAd,EAAD,CAAR;;AAEA,QAAI;AACH,YAAMkB,QAAQ,GAAG,MAAM7B,UAAU,CAAC8B,KAAX,CAAiBH,OAAjB,CAAvB;AACAP,MAAAA,OAAO,CAACG,GAAR,CAAYM,QAAZ;AACGD,MAAAA,QAAQ,CAACpB,KAAK,CAACiB,OAAN,CAAcV,YAAd,CAA2Bc,QAA3B,CAAD,CAAR;AACH,KAJD,CAIE,OAAOE,GAAP,EAAY;AACVH,MAAAA,QAAQ,CAACpB,KAAK,CAACiB,OAAN,CAAcN,UAAd,CAAyBY,GAAzB,CAAD,CAAR;AACH;AACG,GAVD;AAWH","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport analizeApi from \"../api/analize\";\nimport gifApi from \"../api/gif\";\n\nconst initialState = {\n    user_id : \"\",\n    text : \"\",\n    time : \"\",\n    loading: false,\n    error: false\n};\n\nconst slice = createSlice({\n\tname: \"hourReport\",\n\tinitialState,\n\treducers: {\n\t    fetchStart: state => {\n\t\treturn Object.assign({}, state, { text: \"\", loading: true });\n\t    },\n\t    fetchSucceed: (state, action) => {\n\t\treturn Object.assign({}, state, { user_infos: action.payload, loading: false });\n\t    },\n\t    fetchFaild: (state, action) => {\n\t\tconsole.error(action.payload);\n\t\treturn Object.assign({}, state, { loading: false, error: true });\n        },\n        \n\t    clear: () => {\n\t\treturn { text: \"\", loading: false, error: false };\n        },\n        postReport: (state,action) => {\n            console.log(\"post\") \n            console.log(action.payload)   \n            return {text: action.payload, loading: false, error: false }\n        }\n        \n\t}\n    });\n\n// Reducer\nexport default slice.reducer;\n\n// Actions\nexport const { clear } = slice.actions;\nexport const { postReport } = slice.actions;\n\n// Async task\nexport function fetchAsync(channel) {\n    return async function(dispatch) {\n\tdispatch(slice.actions.fetchStart());\n\n\ttry {\n\t\tconst response = await analizeApi.slack(channel);\n\t\tconsole.log(response)\n\t    dispatch(slice.actions.fetchSucceed(response));\n\t} catch (err) {\n\t    dispatch(slice.actions.fetchFaild(err));\n\t}\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport gifApi from \"../api/gif\";\nconst initialState = {\n  user_id: \"\",\n  text: \"\",\n  time: \"\",\n  loading: false,\n  error: false\n};\nconst slice = createSlice({\n  name: \"hourReport\",\n  initialState,\n  reducers: {\n    fetchStart: state => {\n      return Object.assign({}, state, {\n        text: \"\",\n        loading: true\n      });\n    },\n    fetchSucceed: (state, action) => {\n      return Object.assign({}, state, {\n        text: action.payload,\n        loading: false\n      });\n    },\n    fetchFaild: (state, action) => {\n      console.error(action.payload);\n      return Object.assign({}, state, {\n        loading: false,\n        error: true\n      });\n    },\n    clear: () => {\n      return {\n        text: \"\",\n        loading: false,\n        error: false\n      };\n    }\n  }\n}); // Reducer\n\nexport default slice.reducer; // Actions\n\nexport const {\n  clear\n} = slice.actions; // Async task\n\nexport function fetchAsync() {\n  return async function (dispatch) {\n    dispatch(slice.actions.fetchStart());\n\n    try {\n      const response = await gifApi.random();\n      dispatch(slice.actions.fetchSucceed(response.url));\n    } catch (err) {\n      dispatch(slice.actions.fetchFaild(err));\n    }\n  };\n}\nexport function postReport({\n  text\n}) {\n  console.log(text);\n  dispatch(slice.actions.fetchSucceed(text));\n}","map":{"version":3,"sources":["/Users/shiokawahayato/work/HRLog/src/stores/hourReport.js"],"names":["createSlice","gifApi","initialState","user_id","text","time","loading","error","slice","name","reducers","fetchStart","state","Object","assign","fetchSucceed","action","payload","fetchFaild","console","clear","reducer","actions","fetchAsync","dispatch","response","random","url","err","postReport","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG,EADO;AAEjBC,EAAAA,IAAI,EAAG,EAFU;AAGjBC,EAAAA,IAAI,EAAG,EAHU;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;AAQA,MAAMC,KAAK,GAAGR,WAAW,CAAC;AACzBS,EAAAA,IAAI,EAAE,YADmB;AAEzBP,EAAAA,YAFyB;AAGzBQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAEC,KAAK,IAAI;AACxB,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAER,QAAAA,IAAI,EAAE,EAAR;AAAYE,QAAAA,OAAO,EAAE;AAArB,OAAzB,CAAP;AACI,KAHK;AAINS,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpC,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAER,QAAAA,IAAI,EAAEY,MAAM,CAACC,OAAf;AAAwBX,QAAAA,OAAO,EAAE;AAAjC,OAAzB,CAAP;AACI,KANK;AAONY,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQI,MAAR,KAAmB;AAClCG,MAAAA,OAAO,CAACZ,KAAR,CAAcS,MAAM,CAACC,OAArB;AACA,aAAOJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyB;AAAEN,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAAzB,CAAP;AACO,KAVE;AAYNa,IAAAA,KAAK,EAAE,MAAM;AAChB,aAAO;AAAEhB,QAAAA,IAAI,EAAE,EAAR;AAAYE,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,KAAK,EAAE;AAAnC,OAAP;AACI;AAdK;AAHe,CAAD,CAAzB,C,CAqBA;;AACA,eAAeC,KAAK,CAACa,OAArB,C,CAEA;;AACA,OAAO,MAAM;AAAED,EAAAA;AAAF,IAAYZ,KAAK,CAACc,OAAxB,C,CAEP;;AACA,OAAO,SAASC,UAAT,GAAsB;AACzB,SAAO,gBAAeC,QAAf,EAAyB;AACnCA,IAAAA,QAAQ,CAAChB,KAAK,CAACc,OAAN,CAAcX,UAAd,EAAD,CAAR;;AAEA,QAAI;AACA,YAAMc,QAAQ,GAAG,MAAMxB,MAAM,CAACyB,MAAP,EAAvB;AACAF,MAAAA,QAAQ,CAAChB,KAAK,CAACc,OAAN,CAAcP,YAAd,CAA2BU,QAAQ,CAACE,GAApC,CAAD,CAAR;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVJ,MAAAA,QAAQ,CAAChB,KAAK,CAACc,OAAN,CAAcJ,UAAd,CAAyBU,GAAzB,CAAD,CAAR;AACH;AACG,GATD;AAUH;AAED,OAAO,SAASC,UAAT,CAAoB;AAACzB,EAAAA;AAAD,CAApB,EAA4B;AAC/Be,EAAAA,OAAO,CAACW,GAAR,CAAY1B,IAAZ;AACAoB,EAAAA,QAAQ,CAAChB,KAAK,CAACc,OAAN,CAAcP,YAAd,CAA2BX,IAA3B,CAAD,CAAR;AACH","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport gifApi from \"../api/gif\";\n\nconst initialState = {\n    user_id : \"\",\n    text : \"\",\n    time : \"\",\n    loading: false,\n    error: false\n};\n\nconst slice = createSlice({\n\tname: \"hourReport\",\n\tinitialState,\n\treducers: {\n\t    fetchStart: state => {\n\t\treturn Object.assign({}, state, { text: \"\", loading: true });\n\t    },\n\t    fetchSucceed: (state, action) => {\n\t\treturn Object.assign({}, state, { text: action.payload, loading: false });\n\t    },\n\t    fetchFaild: (state, action) => {\n\t\tconsole.error(action.payload);\n\t\treturn Object.assign({}, state, { loading: false, error: true });\n        },\n    \n\t    clear: () => {\n\t\treturn { text: \"\", loading: false, error: false };\n\t    }\n\t}\n    });\n\n// Reducer\nexport default slice.reducer;\n\n// Actions\nexport const { clear } = slice.actions;\n\n// Async task\nexport function fetchAsync() {\n    return async function(dispatch) {\n\tdispatch(slice.actions.fetchStart());\n\n\ttry {\n\t    const response = await gifApi.random();\n\t    dispatch(slice.actions.fetchSucceed(response.url));\n\t} catch (err) {\n\t    dispatch(slice.actions.fetchFaild(err));\n\t}\n    };\n}\n\nexport function postReport({text}) {\n    console.log(text)\n    dispatch(slice.actions.fetchSucceed(text));\n}\n"]},"metadata":{},"sourceType":"module"}
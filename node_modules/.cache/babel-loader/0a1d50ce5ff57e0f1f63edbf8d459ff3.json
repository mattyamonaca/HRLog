{"ast":null,"code":"var _jsxFileName = \"/Users/shiokawahayato/work/HRLog/src/components/InputForm.js\";\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction SlackForm({\n  text,\n  loading,\n  error\n}) {\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({\n    text: \"\"\n  });\n  console.log(text);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"notification is-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }\n    }, \"Error!!\");\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"notification is-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 14\n      }\n    }, \"Loading...\");\n  }\n\n  if (!text) {\n    console.log(\"success\");\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, \"HRLog\"), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"exampleForm.ControlInput1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, \"Slack\\u306E\\u30C1\\u30E3\\u30F3\\u30CD\\u30EBID\\u3092\\u5165\\u529B\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"channel_id\",\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: () => dispatch(fetchAsync(values.text)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, \"Start\"))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserInfoList, Object.assign({\n    text\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  })));\n\n  function handleInputChange(e) {\n    const target = e.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    setValues({ ...values,\n      [name]: value\n    });\n    console.log(value);\n  }\n}\n\nexport default SlackForm;","map":{"version":3,"sources":["/Users/shiokawahayato/work/HRLog/src/components/InputForm.js"],"names":["React","useState","useSelector","useDispatch","SlackForm","text","loading","error","dispatch","values","setValues","console","log","handleInputChange","fetchAsync","e","target","value","type","checked","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAGA,SAASC,SAAT,CAAmB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,OAAN;AAAcC,EAAAA;AAAd,CAAnB,EAAwC;AACpC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEE,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC;AACnCI,IAAAA,IAAI,EAAG;AAD4B,GAAD,CAApC;AAGFM,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;;AACA,MAAIE,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACD;;AACD,MAAID,OAAJ,EAAa;AACX,wBAAO;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACG;;AACL,MAAI,CAACD,IAAL,EAAW;AACTM,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,wBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,2BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEADA,eAEA,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,MAAnB;AAA0B,MAAA,IAAI,EAAG,MAAjC;AAAwC,MAAA,WAAW,EAAC,YAApD;AAAiE,MAAA,QAAQ,EAAEC,iBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CADA,eAMA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAwC,MAAA,OAAO,EAAE,MAAML,QAAQ,CAACM,UAAU,CAACL,MAAM,CAACJ,IAAR,CAAX,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANA,CADF,CAFF,CADF;AAiBD;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD,gBAAkB;AAACA,IAAAA;AAAD,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADJ;;AAMA,WAASQ,iBAAT,CAA2BE,CAA3B,EAA8B;AAC5B,UAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,KAAgB,UAAhB,GAA6BF,MAAM,CAACG,OAApC,GAA8CH,MAAM,CAACC,KAAnE;AACA,UAAMG,IAAI,GAAGJ,MAAM,CAACI,IAApB;AACAV,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACW,IAAD,GAAQH;AAArB,KAAD,CAAT;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACD;AAEF;;AAED,eAAeb,SAAf","sourcesContent":["import React ,{useState }from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction SlackForm({text,loading,error}){\n    const dispatch = useDispatch();\n  \n      const [values, setValues] = useState({\n        text : \"\"\n      });\n    console.log(text)\n    if (error) {\n      return <p className=\"notification is-danger\">Error!!</p>;\n    }\n    if (loading) {\n      return <p className=\"notification is-info\">Loading...</p>;\n        }\n    if (!text) {\n      console.log(\"success\")\n      return (\n        <Card className=\"text-left\">\n          <Card.Header>HRLog</Card.Header>\n          <Card.Body>\n            <Form>\n            <Form.Group controlId=\"exampleForm.ControlInput1\">\n            <Form.Label>SlackのチャンネルIDを入力</Form.Label>\n            <Form.Control type=\"text\" name = \"text\" placeholder=\"channel_id\" onChange={handleInputChange}/>\n            </Form.Group>\n            \n            <Button variant=\"primary\" type=\"submit\" onClick={() => dispatch(fetchAsync(values.text))} >\n            Start\n            </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      );\n    }\n  \n    return (\n        <div>\n          <UserInfoList {...{text}} />\n      </div>\n    );\n  \n    function handleInputChange(e) {\n      const target = e.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      setValues({ ...values, [name]: value });\n      console.log(value)\n    }\n    \n  }\n\n  export default SlackForm;"]},"metadata":{},"sourceType":"module"}